#2704
/**
 * @param {string} val
 * @return {Object}
 */
var expect = function(val) {
    function toBe(val2) {
       if (val === val2) {
           return true
       } else {
           throw new Error('Not Equal')
       }
    }

    function notToBe(val2){
        if (val !== val2) {
            return true
        } else {
            throw new Error('Equal')
        }
    }

    return {
        toBe,
        notToBe
    }
};
#2665
/**
 * @param {integer} init
 * @return { increment: Function, decrement: Function, reset: Function }
 */
var createCounter = function(init) {

    let count = init;
    return {
   increment: function() { return ++count; },
   reset: function() { return count = init; },

   decrement: function() { return --count; }

    }
    
};

/**
 * const counter = createCounter(5)
 * counter.increment(); // 6
 * counter.reset(); // 5
 * counter.decrement(); // 4
 */
#2635
/**
 * @param {number[]} arr
 * @param {Function} fn
 * @return {number[]}
 */
var map = function(arr, fn) {
    let result = [];
    for(let i = 0; i < arr.length; i++){
        result.push(fn(arr[i], i));
       
    }
     return result;
    
};