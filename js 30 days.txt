#2704
/**
 * @param {string} val
 * @return {Object}
 */
var expect = function(val) {
    function toBe(val2) {
       if (val === val2) {
           return true
       } else {
           throw new Error('Not Equal')
       }
    }

    function notToBe(val2){
        if (val !== val2) {
            return true
        } else {
            throw new Error('Equal')
        }
    }

    return {
        toBe,
        notToBe
    }
};
#2665
/**
 * @param {integer} init
 * @return { increment: Function, decrement: Function, reset: Function }
 */
var createCounter = function(init) {

    let count = init;
    return {
   increment: function() { return ++count; },
   reset: function() { return count = init; },

   decrement: function() { return --count; }

    }
    
};

/**
 * const counter = createCounter(5)
 * counter.increment(); // 6
 * counter.reset(); // 5
 * counter.decrement(); // 4
 */
#2635
/**
 * @param {number[]} arr
 * @param {Function} fn
 * @return {number[]}
 */
var map = function(arr, fn) {
    let result = [];
    for(let i = 0; i < arr.length; i++){
        result.push(fn(arr[i], i));
       
    }
     return result;
    
};
#2634
var filter = function(arr, fn) {
    let output = [];
    for (let i=0; i<arr.length; i++){
        if(fn(arr[i], i)){
            output.push(arr[i])
        }
    }
    return output
};
#2626
var reduce = function(nums, fn, init) {
    let res = init;
    nums.forEach((n)=>{
        res =fn(res, n);
    })
    return res;
    // return nums.reduce(fn, init);
    
};
#2629
var compose = function(functions) {


   const fn = (acc, fn) => fn(acc);
   return function(x){
    return functions.reduceRight(fn, x);

   }
    
    return function(x) {
        for(const fn of functions.riverse()){
            x = fn(x);
        }
        return x;
    }
};
// const fn = x=> x+1;
/ const fn1 = x=> x * 2;
// print(fn(fn1(4)));

/**
 * const fn = compose([x => x + 1, x => 2 * x])
 * fn(4) // 9
 */
#2703
 return args.lengt
#2666
var once = function(fn) {
    let called = false;
    
    return function(...args){
        if(called){
            return undefined;
        }
        called = true
        return fn(...args)
        
    }
};

/**
 * let fn = (a,b,c) => (a + b + c)
 * let onceFn = once(fn)
 *
 * onceFn(1,2,3); // 6
 * onceFn(2,3,6); // returns undefined without calling fn
 */

#2723
/**
 * @param {Promise} promise1
 * @param {Promise} promise2
 * @return {Promise}
 */
var addTwoPromises = async function(promise1, promise2) {
     return promise1.then(v1 => promise2.then(v2 => v1+v2));
};

/**
 * addTwoPromises(Promise.resolve(2), Promise.resolve(2))
 *   .then(console.log); // 4
 */
#2621
/**
 * @param {number} millis
 * @return {Promise}
 */
async function sleep(millis) {
 function callback(resolve, reject){
    setTimeout(resolve, millis);
 }

    return new Promise(callback);
    
}
